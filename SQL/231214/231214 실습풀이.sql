-- [함수/프로시져 실습]

-- 1. 프로시져명 : PROC_GUGUDAN
--     기능 : 구구단을 출력한다.

CREATE OR REPLACE PROCEDURE PROC_GUGUDAN
IS
BEGIN
	FOR I IN 2..9
	LOOP
		FOR J IN 1..I
		LOOP
			DBMS_OUTPUT.PUT_LINE(I||'*'||J||'='||(I*J));
		END LOOP;		
	END LOOP;	
END;

CALL PROC_GUGUDAN();


-- 2. 프로시져명 : PROC_STARPRINT1
--     기능 : 별을 출력한다.
--     출력형태
--     *
--     **
--     ***
--     ****
--     *****

CREATE OR REPLACE PROCEDURE PROC_STARPRINT1
IS
BEGIN
	FOR I IN 1..5
	LOOP
		FOR J IN 1..I
		LOOP
			DBMS_OUTPUT.PUT('*');	
		END LOOP;
		DBMS_OUTPUT.PUT_LINE('');
	END LOOP;
END;

CALL PROC_STARPRINT1();


-- 3. 프로시져명 : PROC_STARPRINT2
--     기능 : 별을 출력한다.
--     출력형태
--         *
--        **
--       ***
--      ****
--     *****

CREATE OR REPLACE PROCEDURE PROC_STARPRINT2
IS
BEGIN
	FOR I IN 1..5
	LOOP
		FOR K IN 1..(5-I)
		LOOP
			DBMS_OUTPUT.PUT(' ');
		END LOOP;
		FOR J IN 1..I
		LOOP
			DBMS_OUTPUT.PUT('*');	
		END LOOP;
		DBMS_OUTPUT.PUT_LINE('');
	END LOOP;
END;

CALL PROC_STARPRINT2();

-- 4. 프로시져명 : PROC_GETDEPTID
--    기능 : EMPLOYEE_ID를 입력하면 해당 직원의 DEPARTMENT_ID를 출력

CREATE OR REPLACE PROCEDURE PROC_GETDEPTID
	(P_EMPID IN EMPLOYEES.EMPLOYEE_ID%TYPE,
	 P_DEPTID OUT EMPLOYEES.DEPARTMENT_ID%TYPE)
IS
BEGIN
	SELECT DEPARTMENT_ID
	INTO P_DEPTID
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID = P_EMPID;
END;

DECLARE
	V_DEPTID EMPLOYEES.DEPARTMENT_ID%TYPE;
BEGIN
	PROC_GETDEPTID(100, V_DEPTID);
	DBMS_OUTPUT.PUT_LINE(V_DEPTID);
END;


-- 5. 프로시져명 : PROC_GETYOIL
--   기능 : 년도네자리, 월두자리, 일두자리를 입력하면 해당 일자의 요일을 출력

CREATE OR REPLACE PROCEDURE PROC_GETYOIL(
	P_YEAR IN VARCHAR2,
	P_MONTH IN VARCHAR2,
	P_DAY IN VARCHAR2,
	P_YOIL OUT VARCHAR2
)
IS
BEGIN
	P_YOIL := TO_CHAR(TO_DATE(P_YEAR||'.'||P_MONTH||'.'||P_DAY), 'DAY');
END;

DECLARE
	V_YOIL VARCHAR2(100);
BEGIN
	PROC_GETYOIL('2023','12','14', V_YOIL);
	DBMS_OUTPUT.PUT_LINE(V_YOIL);
END;

-- 6. 함수명 : FUNC_COUNTEMP
--   기능 : DEPARTMENT_ID를 입력하면 해당 부서의 직원의 수를 출력

CREATE OR REPLACE FUNCTION FUNC_COUNTEMP(P_DEPTID NUMBER)
	RETURN NUMBER
IS
	V_COUNT NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_COUNT
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID = P_DEPTID;
	RETURN V_COUNT;
END;

BEGIN
	DBMS_OUTPUT.PUT_LINE(FUNC_COUNTEMP(100));
END;


-- 7. 함수명 : FUNC_MAXMINSALARY
--   기능 : EMPLOYEE_ID 100을 입력하면 해당 직원이 소속된 부서내
--           최고급여자이름, 최고급여, 최저급여자이름, 최저급여를 출력
--           (단, 이름은 FIRST_NAME||' '||LAST_NAME)

CREATE OR REPLACE FUNCTION FUNC_MAXMINSALARY
	(P_EMPID EMPLOYEES.EMPLOYEE_ID%TYPE)
	RETURN VARCHAR2
IS
	V_MAXEMPNAME VARCHAR2(50);
	V_MAXSAL EMPLOYEES.SALARY%TYPE;
	V_MINEMPNAME VARCHAR2(50);
	V_MINSAL EMPLOYEES.SALARY%TYPE;
	V_DEPTID EMPLOYEES.DEPARTMENT_ID%TYPE;
BEGIN
	SELECT DEPARTMENT_ID
		INTO V_DEPTID
		FROM EMPLOYEES
		WHERE EMPLOYEE_ID = P_EMPID;
	SELECT MAX(SALARY), MIN(SALARY)
		INTO V_MAXSAL, V_MINSAL
		FROM EMPLOYEES
		WHERE DEPARTMENT_ID = V_DEPTID;
	SELECT FIRST_NAME||' '||LAST_NAME
		INTO V_MAXEMPNAME	
		FROM EMPLOYEES
		WHERE SALARY = V_MAXSAL AND DEPARTMENT_ID = V_DEPTID;
	SELECT FIRST_NAME||' '||LAST_NAME
		INTO V_MINEMPNAME	
		FROM EMPLOYEES
		WHERE SALARY = V_MINSAL AND DEPARTMENT_ID = V_DEPTID;
	RETURN '최고급여자명:'||V_MAXEMPNAME||', '||
				'최고급여:'||V_MAXSAL||', '||
			    '최저급여자명:'||V_MINEMPNAME||', '||
			    '최저급여:'||V_MINSAL;
END;

BEGIN
	DBMS_OUTPUT.PUT_LINE(FUNC_MAXMINSALARY(130));
END;

-- 8. 함수명 : FUNC_GETGRADE
--   기능 : 점수(0~100)를 입력하면 100~80 A, 79~60 B, 59~40 C, 나머지 F를 출력

CREATE OR REPLACE FUNCTION FUNC_GETGRADE
	(P_SCORE NUMBER)
	RETURN CHAR
IS
	V_GRADE CHAR(1);
BEGIN
	SELECT
		CASE WHEN P_SCORE BETWEEN 80 AND 100 THEN 'A'
				 WHEN P_SCORE BETWEEN 60 AND 79 THEN 'B'
				 WHEN P_SCORE BETWEEN 40 AND 59 THEN 'C'
				 ELSE 'F'
		END
	INTO V_GRADE
	FROM DUAL;
	RETURN V_GRADE;
END;

BEGIN
	DBMS_OUTPUT.PUT_LINE(FUNC_GETGRADE(90));
END;